import React, { useState } from "react";
import { apiFetch } from "../Api.jsx";

export default function MovieCard({ movie, onUpdated }) {
  // --- –°—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É ---
  const [comment, setComment] = useState("");         // –¢–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
  const [editingId, setEditingId] = useState(null);   // ID –∫–æ–º–µ–Ω—Ç–∞—Ä—è, —è–∫–∏–π —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è
  const [editingText, setEditingText] = useState(""); // –¢–µ–∫—Å—Ç —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
  const user = JSON.parse(localStorage.getItem("user") || "null"); // –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

  // --- –õ–∞–π–∫/–î–∏–∑–ª–∞–π–∫ ---
  async function sendLike(type) {
    try {
      await apiFetch(`/movies/${movie.id}/like`, {
        method: "POST",
        body: JSON.stringify({ type })
      });
      onUpdated && onUpdated(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ª–∞–π–∫—É
    } catch (err) {
      alert(err.message || "Error");
    }
  }

  // --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è ---
  async function sendComment(e) {
    e.preventDefault();
    if (!comment) return;
    try {
      await apiFetch(`/movies/${movie.id}/comment`, {
        method: "POST",
        body: JSON.stringify({ text: comment })
      });
      setComment("");
      onUpdated && onUpdated();
    } catch (err) {
      alert(err.message || "Error");
    }
  }

  // --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è ---
  async function updateComment(id) {
    if (!editingText.trim()) {
      setEditingId(null);
      return;
    }
    try {
      await apiFetch(`/comments/${id}`, {
        method: "PUT",
        body: JSON.stringify({ text: editingText })
      });
      setEditingId(null);
      setEditingText("");
      onUpdated && onUpdated();
    } catch (err) {
      alert(err.message || "Error");
    }
  }

  // --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è ---
  async function deleteComment(id) {
    if (!window.confirm("Delete comment?")) return;
    try {
      await apiFetch(`/comments/${id}`, { method: "DELETE" });
      onUpdated && onUpdated();
    } catch (err) {
      alert(err.message || "Error");
    }
  }

  return (
    <div className="movie-card">
      {/* –ü–æ–∫–∞–∑ –ø–æ—Å—Ç–µ—Ä–∞ —Ñ—ñ–ª—å–º—É */}
      {movie.posterPath ? (
        <img src={movie.posterPath} alt={movie.title} />
      ) : (
        <div className="poster-placeholder">No image</div>
      )}

      <div className="info">
        <h3>{movie.title}</h3>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—ñ–ª—å–º—É: –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ */}
        <div className="movie-stats">
            üëç: {movie.likes ?? 0} üëé: {movie.dislikes ?? 0} <br />
            –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {movie.commentsCount ?? (movie.comments?.length || 0)}
        </div>

        {movie.overview && <p>{movie.overview}</p>}

        {/* –ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫ */}
        <div className="actions">
          <button onClick={() => sendLike("like")}>üëç {movie.likes ?? 0}</button>
          <button onClick={() => sendLike("dislike")}>üëé {movie.dislikes ?? 0}</button>
        </div>

        {/* –†–æ–∑–¥—ñ–ª –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ */}
        <div className="comments-section">
          <h4>Comments: </h4>
          {movie.comments?.length > 0 ? (
            movie.comments.map(c => (
              <div key={c.id} className="comment">
                <div className="comment-text">
                  <div>
                  {/* –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */}
                  <div className="comment-meta user-name">
                    {c.user?.username || "anonymous"} 
                  </div>

                  {/* –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ –∫–ª—ñ–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç */}
                  {editingId === c.id ? (
                    <input
                      autoFocus
                      value={editingText}
                      onChange={e => setEditingText(e.target.value)}
                      onBlur={() => updateComment(c.id)} 
                      onKeyDown={e => {
                        if (e.key === "Enter") updateComment(c.id);
                        if (e.key === "Escape") setEditingId(null);
                      }}
                    />
                  ) : (
                    <span
                      onClick={() => {
                        if (user && user.id === c.user?.id) {
                          setEditingId(c.id);
                          setEditingText(c.text);
                        }
                      }}
                      style={{
                        cursor: user && user.id === c.user?.id ? "pointer" : "default"
                      }}
                    >
                      {c.text}
                    </span>
                  )}
                </div>

                {/* –î–∞—Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è */}
                <div className="comment-meta">
                  {new Date(c.createdAt).toLocaleString()}
                </div>
                  </div>
                {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è */}
                {user && user.id === c.user?.id && (
                  <div className="comment-actions">
                    <button onClick={() => deleteComment(c.id)}>‚ùå</button>
                  </div>
                )}
              </div>
            ))
          ) : (
            <div>No comments</div>
          )}

          {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è */}
          {user ? (
            <form onSubmit={sendComment} className="comment-form">
              <input
                value={comment}
                onChange={e => setComment(e.target.value)}
                placeholder="Write comment..."
              />
              <button type="submit">Send</button>
            </form>
          ) : (
            <div className="login-hint">Login to comment</div>
          )}
        </div>
      </div>
    </div>
  );
}
